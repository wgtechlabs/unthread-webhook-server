# =============================================================================
# UNTHREAD WEBHOOK SERVER - DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Complete application stack for the Unthread Webhook Server
#
# Services:
# ┌─ webhook-server     → Main webhook processing application  
# └─ redis-webhook      → Redis for webhook message queuing
#
# Usage:
#   docker-compose up -d                    # Start all services
#   docker-compose logs -f webhook-server   # View webhook server logs
#   docker-compose exec redis-webhook redis-cli
#
# Prerequisites: 
#   - Copy .env.example to .env and configure your tokens
#
# =============================================================================

services:
  # =============================================================================
  # REDIS - WEBHOOK OPERATIONS
  # =============================================================================
  # Dedicated Redis instance for webhook message queuing and communication
  redis-webhook:
    image: redis:8-alpine
    container_name: redis-webhook
    ports:
      - "6379:6379"
    volumes:
      - redis_webhook_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: redis-server --appendonly yes

  # =============================================================================
  # WEBHOOK SERVER APPLICATION
  # =============================================================================
  # Handles incoming webhooks from Unthread and processes them
  webhook-server:
    build: .  # Build from local Dockerfile to use current codebase
    image: unthread-webhook-server:local  # Custom image name for local builds
    # image: wgtechlabs/unthread-webhook-server:latest  # Uncomment to use Docker Hub image
    container_name: unthread-webhook-server
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      redis-webhook:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# =============================================================================
# PERSISTENT VOLUMES
# =============================================================================
# Named volumes for data persistence across container restarts
volumes:
  redis_webhook_data:    # Redis webhook queue data
